// Generated by CoffeeScript 1.6.3
var MessageBubble, View,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('atom').View;

module.exports = MessageBubble = (function(_super) {
  __extends(MessageBubble, _super);

  MessageBubble.content = function(params) {
    var _this = this;
    return this.div({
      "class": "inline-message " + params.klass,
      style: params.style
    }, function() {
      var msg, _i, _len, _ref, _results;
      _ref = params.messages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        msg = _ref[_i];
        _results.push(_this.div({
          "class": "message-content"
        }, function() {
          _this.div({
            "class": "message-source"
          }, function() {
            return _this.raw(msg.src);
          });
          return _this.div({
            "class": "message-body"
          }, function() {
            return _this.raw(msg.content);
          });
        }));
      }
      return _results;
    });
  };

  function MessageBubble(_arg) {
    var content, editor, editorView, end, klass, line, min, pageData, start, style, title;
    editor = _arg.editor, editorView = _arg.editorView, title = _arg.title, line = _arg.line, start = _arg.start, end = _arg.end, content = _arg.content, klass = _arg.klass, min = _arg.min;
    this.title = title;
    this.line = line - 1;
    this.start = start;
    this.end = end;
    this.content = content;
    this.klass = klass;
    this.editor = editor;
    this.editorView = editorView;
    this.messages = [
      {
        content: this.content,
        src: this.title
      }
    ];
    style = this.calculateStyle(this.line, this.end);
    MessageBubble.__super__.constructor.call(this, {
      messages: this.messages,
      klass: this.klass,
      style: style
    });
    if (this.min) {
      this.minimize();
    }
    editorView = atom.workspaceView.getActiveView();
    pageData = editorView.find(".overlayer");
    if (pageData) {
      pageData.first().prepend(this);
    }
  }

  MessageBubble.prototype.calculateStyle = function(line, last) {
    var fstPos, lastPos, left, top;
    if (this.editorView && this.editor) {
      last = this.editor.getBuffer().lineLengthForRow(line);
      fstPos = this.editorView.pixelPositionForBufferPosition({
        row: line,
        column: 0
      });
      lastPos = this.editorView.pixelPositionForBufferPosition({
        row: line,
        column: last
      });
      top = fstPos.top;
      left = lastPos.left;
      if (left < 640) {
        left = 640;
      }
      left = left + 25;
      return "position:absolute;left:" + left + "px;top:" + top + "px;";
    }
  };

  MessageBubble.prototype.update = function() {
    var body, content, lastSrc, msg, msgs, src, _i, _len, _ref;
    lastSrc = null;
    this.find(".message-content").remove();
    msgs = "";
    _ref = this.messages;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      msg = _ref[_i];
      if (msg.src === lastSrc) {
        body = "<div class='message-body'>" + msg.content + "</div>";
        content = "<div class='message-content'>" + body + "</div>";
      } else {
        src = "<div class='message-source'>" + msg.src + "</div>";
        body = "<div class='message-body'>" + msg.content + "</div>";
        content = "<div class='message-content'>" + src + body + "</div>";
      }
      lastSrc = msg.src;
      msgs = msgs + content;
    }
    return this.append(msgs);
  };

  MessageBubble.prototype.add = function(title, content) {
    this.messages.push({
      content: content,
      src: title
    });
    return this.update();
  };

  return MessageBubble;

})(View);
